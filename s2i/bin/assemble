#!/bin/bash

echo "starting assemble script.."
set -e

for artifact_path in .m2 .gradle .target; do
  echo "---> Restore /tmp/artififacts/${artifact_path} to \$HOME (${HOME})"
  if [ "$(ls /tmp/artifacts/{artifact_path} 2>/dev/null)" ]; then
      mv /tmp/artifacts/{artifact_path} $HOME
  else
    echo "--> none present"
  fi
done

echo "---> Installing application source"
cp -Rf /tmp/src/. ./

if [ -e bower.json ]; then
  echo "---> Found bower.json, installing bower"
  npm install
  bower update
  bower install
fi

echo "---> Building Spring Boot application from source"
echo "--> # JAVA_OPTS = $JAVA_OPTS"
echo "--> # MVN_ARGS = $MVN_ARGS"
echo "--> # GRADLE_ARGS = $GRADLE_ARGS"

if [ -z ${MVN_ARGS+set} -a -n ${JAVA_OPTS+set} ]
  echo "--> MVN_ARGS was not set but JAVA_OPTS was"
  echo "--> setting MVN_ARGS to JAVA_OPTS"
  echo '--> if this is not what you want set MVN_ARGS to ""'
  MVN_ARGS=${JAVA_OPTS}
fi

if [ -z ${GRADLE_ARGS+set} -a -n ${JAVA_OPTS+set} ]
  echo "--> GRADLE_ARGS was not set but JAVA_OPTS was"
  echo "--> setting GRADLE_ARGS to JAVA_OPTS"
  echo '--> if this is not what you want set GRADLE_ARGS to ""'
  GRADLE_ARGS=${JAVA_OPTS}
fi

if [ -f "build.gradle" ]; then
  echo "--> Found build.gradle, using gradle"
  echo "--> # GRADLE_ARGS = $GRADLE_ARGS"
  ./gradlew build $JAVA_OPTS
elif [ -f "mvnw" -a -d "src/.mvn" ]; then
  echo "--> Project provides mvn wrapper, mvnw, and src/.mvn exists using it instead of calling mvn directly"
  ./mvnw clean install $MVN_ARGS
else
  mvn clean install $MVN_ARGS
fi

# Fix source directory permissions
fix-permissions ./

# remove temp files created during in build
find /tmp/ -user `whoami` -delete

echo "finished assemble script.."
